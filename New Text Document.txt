#include <iostream>
#include <string>

using namespace std;

union un
{
    long long numb;
    unsigned char bites[8];
};

union summer
{
    unsigned short numb;
    unsigned char bite[2];
};

class SBigNum
{
private:
    unsigned char *f_pnum;   //������ �� 1 ���� ==> �������� ������������� �����
    int f_size;
    bool znak;               //���� ��������������� �����
public:

    SBigNum()
    {
        f_pnum = NULL; //������� ���������� ������
        f_size = 0;
        znak = false;  //��������� ������� ��� �����
    }

    SBigNum(SBigNum & TBN)   //����������� �����������
    {
        f_pnum = NULL; //+����� ���������
        f_size = 0;    //+�������������
        znak = false;  //+�� ������������ �� ���������

        if(TBN.getsize() > 0)
        {
            setsize(TBN.getsize());

            znak = TBN.getznak();

            for(int i =  0; i < (f_size); i++)
            {
                f_pnum[i] = TBN.getnum(i);
            }
        }
    }

    ~SBigNum()
    {
        delete [] this->f_pnum;                         //���������� ��� ������������� �������
    }

    int getsize()
    {
        return this->f_size;                            //���������� size
    }

    bool getznak()
    {
        return this->znak;                              //���������� �������� �����
    }

    void setData(unsigned char data, int index)
    {
        if ((index>-1)&&(index<f_size))f_pnum[index] = data;
    }

    unsigned char getnum(int index)                     //
    {
        unsigned char res = 0;

        if(index < (this->f_size))
        {
            res = f_pnum[index];
        }

        return res;
    }

    void setsize(int setsize)
    {
            if(setsize != f_size)
        {
            unsigned char *trans = new unsigned char[setsize];
            if ((znak))
            {

                if(f_size > 0) f_pnum[f_size-1] &=127;

                for (unsigned long long i=0; ((i<f_size)&&(i<setsize)); i++)
                {
                    trans[i] = f_pnum[i];
                }
                for (unsigned long long i=f_size; i<setsize; i++)
                {
                    trans[i] = 0;
                }
                trans[setsize-1] |=1<<7;

            }else{

                for (unsigned long long i=0; ((i<f_size)&&(i<setsize)); i++)
                {
                    trans[i] = f_pnum[i];
                }
                for (unsigned long long i=f_size; i<setsize; i++)
                {
                    trans[i] = 0;
                }
                trans[setsize-1] &=127;

            }//if f_size != setsize

            delete [] f_pnum;
            f_size = setsize;
            f_pnum = trans;
        }
    }

    void setnum(int num)                                        //����� � ���� ����������� ������� 6 �� ���������� �������� ����� �����.
    {                                                           //�����������, ����� ����� ���� �������� ���������� � ����� ����� ����� ������. � �� ��������� ������, ���������� ��� ������� ����. �� ������� ������������ ������. ??
        if(num < 0)                                             //���� ����������� ������ - �������������, ������ �� ���� �������������
        {
            num = -num;                                         //������� ��� �������� ����� �����
            znak = true;                                        //znak = true <=> ����������� ����� ���� �������������
        }

        setsize(4);                                             //������������� SBigNum
        un unionvar;                                            //���������� ���������� ���� union � ������ "un"
        unionvar.numb = num;                                    //����������� �������� ������� ������������� ���������� �� union "un"

        for (int i = 0; i < this->f_size; i++)
        {
            this->f_pnum[i] = unionvar.bites[i];                //��������� ������������ ������, ��� �������� ������������ �����,
        }                                                       //� ������ �������� �� union "un"

        if(znak)
        {
            f_pnum[f_size-1] |= 1 << 7;                           //���� ����� ������������� (true), �� � ��������� ������ ������� �������� 1
        }
    }

    void setnum(short num)
    {
        if(num < 0)
        {
            num = -num;
            znak = true;
        }

        setsize(2);
        un unionvar;
        unionvar.numb = num;

        for (int i = 0; i < this->f_size; i++)
        {
            this->f_pnum[i] = unionvar.bites[i];
        }

        if(znak)
        {
            f_pnum[f_size - 1] |= 1<<7;
        }
    }

    void setnum(long long num)
    {
        if(num < 0)
        {
            num = -num;
            znak = true;
        }

        setsize(8);
        un unionvar;
        unionvar.numb = num;

        for (int i = 0; i < this->f_size; i++)
        {
            this->f_pnum[i] = unionvar.bites[i];
        }

        if(znak)
        {
            f_pnum[f_size-1] |= 1 << 7;
        }
    }

    void printBin()                                                                         //����� ����� � �������� ����
    {
        for(int i = (this->f_size  - 1); i > -1; i--)
        {
            for(int j = 7; j > -1; j--)
            {
                cout << ((f_pnum[i] >> j) & 1);                                             //������ � �������������� ����� � �������� �����
            }                                                                               //� ��� ������������� � ���� ������� ????

            cout<<" ";
        }
    }

    void dop_cod()                                                                           //������� � �������� � �������������� ���
    {

        f_pnum[f_size-1] &= 127;

        if (znak != 0)
        {


            for (unsigned long long i = 0; i<f_size; i++)
            {
                f_pnum[i] = ~(f_pnum[i]);
            }
            summer sum;
            sum.numb = f_pnum[0];
            sum.numb += 1;
            f_pnum[0] = sum.bite[0];
            unsigned long long counter = 1;
            while (sum.bite[1])
            {
                sum.numb=0;
                sum.numb=f_pnum[counter];
                counter++;
                sum.numb += 1;
                f_pnum[counter] = sum.bite[0];
            }
        }


    }


    void pryamoy_cod()
    {



            if (f_pnum[f_size-1] & 1<<7)
        {

            for (int i = 0; i<f_size; i++)
            {
                f_pnum[i] = ~(f_pnum[i]);
            }
            summer sum;
            sum.numb = f_pnum[0];
            sum.numb += 1;
            f_pnum[0] = sum.bite[0];
            unsigned long long counter = 1;
            while (sum.bite[1])
            {
                sum.numb=0;
                sum.numb=f_pnum[counter];
                counter++;
                sum.numb += 1;
                f_pnum[counter] = sum.bite[0];
            }
            znak = true;
            f_pnum[f_size-1] |= 1<<7;
        }else{
            znak = false;
        }



    }

    void setZnak(bool nZnak)
    {
        znak = nZnak;
    }




    char fourbittohex(unsigned char input)
    {
        char res = 0;
    switch (input)
    {
    case 0:
        cout<< '0';
        break;
    case 1:
        cout<< '1';
        break;
    case 2:
        cout<< '2';
        break;
    case 3:
        cout<< '3';
        break;
    case 4:
        cout<< '4';
        break;
    case 5:
        cout<< '5';
        break;
    case 6:
        cout<< '6';
        break;
    case 7:
        cout<< '7';
        break;
    case 8:
        cout<< '8';
        break;
    case 9:
        cout<< '9';
        break;
    case 10:
        cout<< 'A';
        break;
    case 11:
        cout<< 'B';
        break;
    case 12:
        cout<< 'C';
        break;
    case 13:
        cout<< 'D';
        break;
    case 14:
        cout<< 'E';
        break;
    case 15:
        cout<< 'F';
        break;
    default:
        res = 0;
    }
    return res;
    }

void hexadecimal()                        //������� � 16������ ���
{

    unsigned char tHex[2];
    for (int i = f_size-1; i>-1; i--)
    {
        tHex[0] = f_pnum[i] & 15; /// 00001111
        tHex[1] = f_pnum[i] & 240;/// 11110000
        tHex[1] = tHex[1] >> 4;
        fourbittohex(tHex[1]);
        fourbittohex(tHex[0]);
        cout <<" ";
    }
};


   SBigNum operator+(SBigNum &TBN2)
   {

        SBigNum PTBN1, PTBN2;

        PTBN1.setsize(f_size);
        PTBN1.setZnak(znak);
        for(int i = 0; i<f_size; i++)
        {
            PTBN1.setData(f_pnum[i],i);
        }

        PTBN2 = TBN2;
        int n_size;
        if(PTBN1.getsize() > PTBN2.getsize()) n_size = PTBN1.getsize();else n_size = PTBN2.getsize();
        n_size++;
        summer sum;
        sum.numb=0;
        PTBN1.setsize(n_size);
        PTBN2.setsize(n_size);
        PTBN1.dop_cod();
        PTBN2.dop_cod();
        for (int i=0;i<n_size;i++)
        {
            sum.numb=PTBN1.getnum(i) + PTBN2.getnum(i) + sum.bite[1];
            PTBN1.setData(sum.bite[0], i);
        }


        PTBN1.pryamoy_cod();



        return PTBN1;

   }

   SBigNum operator-(const SBigNum &TBN2)
   {
        SBigNum PTBN1, PTBN2;
        PTBN1 = *this;
        PTBN2 = TBN2;
        if ((PTBN2.getnum(PTBN2.getsize()-1) & 1<<7) != 0)
        {
            PTBN2.setData((PTBN2.getnum(PTBN2.getsize()-1)&127) , PTBN2.getsize()-1);
            PTBN2.setZnak(false);
        }else{
            PTBN2.setData((PTBN2.getnum(PTBN2.getsize()-1)|(1<<7)) , PTBN2.getsize()-1);
            PTBN2.setZnak(true);
        }
        PTBN1 = PTBN1 + PTBN2;
        return PTBN1;
   }

    SBigNum & operator=(const SBigNum & TBN)
    {
        if(this->f_pnum != NULL) delete [] this->f_pnum;

        if(TBN.f_size == 0)
        {
            this->f_size = 0;
            this->f_pnum = NULL;
            this->znak = 0;
        }else{
            this->f_pnum = new unsigned char[TBN.f_size];
            this->f_size = TBN.f_size;
            this->znak = TBN.znak;
            for(int i=0; i<this->f_size; i++)
            {
                this->f_pnum[i] = TBN.f_pnum[i];
            }
        }
    }



   void zdvig() //�����, ���� ����� ������������ ��� ������ ����������, �� �� �������� ������� �����
    {
        unsigned char remember=0;


        summer U2b;
        U2b.numb = 0;
        f_pnum[f_size-1] &= 127;
        for (unsigned long long i = 0; i<f_size; i++)
        {
            U2b.numb = f_pnum[i];
            f_pnum[i] = (f_pnum[i]<<1) + remember;
            U2b.numb = U2b.numb<<1;
            if (U2b.bite[1])remember = 1;else remember = 0;
            U2b.numb = 0;
        }
        if(znak)f_pnum[f_size-1] |= 1<<7;
    }




    void PrintBinDec(bool debug)
    {
        SBigNum tcopy;
        tcopy.setsize(f_size);
        for(int i = 0; i<f_size; i++)
        {
            tcopy.setData(f_pnum[i], i);
        }
        tcopy.setData((tcopy.getnum(tcopy.getsize()-1)&127), f_size-1);
        unsigned char BinDec[f_size*3];

        for(unsigned long long i = 0; i<f_size*3; i++) BinDec[i]=0;


        unsigned char remember; //do u remember

        for(unsigned long long i = 0; i<8*f_size; i++)
        {
            for(unsigned long long g = 0; g < f_size*3; g++)
            {
                if( BinDec[g] >= 5)
                {
                    BinDec[g] += 3;
                }
            }

            for(unsigned long long g = 0; g<f_size*3; g++)
            {
                if (BinDec[g]>>4 != 0)
                {
                    remember = BinDec[g]>>4;
                    BinDec[g] &= 15;
                    BinDec[g+1] += remember;
                }
            }

            if(tcopy.getnum(f_size-1) & 1<<7)remember = 1; else remember = 0;

            tcopy.zdvig();

            for(unsigned long long g = 0; g<f_size*3; g++)
            {
                BinDec[g] = (BinDec[g]<<1)+remember;
                if(BinDec[g]&1<<4)
                {
                    remember = 1;
                    BinDec[g] &= 15;
                }else{
                    remember = 0;
                }
            }
        }//�����
        cout<<"in dec = ";
        if (znak)cout<<"-";
        bool fzero = false;
        for(unsigned long long i = f_size*3-1; i!=0; i--)
        {
            if((BinDec[i]!=0)||(fzero))
            {
                fzero = true;
                cout<<+BinDec[i];
            }
        }
        cout<<+BinDec[0]<<"\n";
    }


    bool StrToBin(string input)
    {
        bool newsign = false;
        bool err = false;
        if (input[0] == '-')
        {
            newsign = true;
            input.erase(input.begin());
        }

        unsigned char BCD[input.size()];

        for(unsigned long long i=0; i<input.size(); i++)
        {
            switch(input[i])
            {
            case '0':
                BCD[input.size()-1-i] = 0;
                break;
            case '1':
                BCD[input.size()-1-i] = 1;
                break;
            case '2':
                BCD[input.size()-1-i] = 2;
                break;
            case '3':
                BCD[input.size()-1-i] = 3;
                break;
            case '4':
                BCD[input.size()-1-i] = 4;
                break;
            case '5':
                BCD[input.size()-1-i] = 5;
                break;
            case '6':
                BCD[input.size()-1-i] = 6;
                break;
            case '7':
                BCD[input.size()-1-i] = 7;
                break;
            case '8':
                BCD[input.size()-1-i] = 8;
                break;
            case '9':
                BCD[input.size()-1-i] = 9;
                break;
            default:
                err=true;
                BCD[input.size()-1-i]=0;
            }
        }

        if(err==false)
        {


            setsize(input.size()+1);
            setZnak(newsign);
            unsigned char remember1 = 0;
            unsigned char remember2 = 0;
            bool inProgress = true;
            unsigned long long counter = 0;

            while((inProgress)&&(input.size()!=0))
            {
                for(unsigned long long i = input.size()-1; i!=0; i--)
                {
                    remember2 = BCD[i]&1;
                    BCD[i] = BCD[i]>>1;
                    if(remember1)BCD[i] |=1<<3;
                    remember1 = remember2;
                }
                remember2 = BCD[0]&1;
                BCD[0] = (BCD[0]>>1);
                if(remember1)BCD[0] |= 1<<3;
                //_________
                f_pnum[counter/8] |= (remember2)<<(counter%8);

                counter++;
                remember1=0;
                inProgress=false;
                for(unsigned long long i = 0; i<input.size();i++)
                {
                    if(BCD[i]!=0)inProgress=true;
                    if(BCD[i]>=8)BCD[i]-=3;
                }

            }



        }else{
            cout<<"\n\nERROR IN STRING\n\n";
            throw(-1);
        }

        return err;
    }



};



int main()
{
    setlocale(LC_ALL, "Russian");
    long long byte8max = 9223372036854775807;

    SBigNum SBN1;
    SBN1.setnum(byte8max);

    SBN1 = SBN1 + SBN1 + SBN1 + SBN1;

    cout << "     ����� ������������ ����� �����"<<endl;
    cout << "__" << endl;
    cout << "����������� ����� ����� - long long(8����) " << byte8max << endl;
    cout <<"��� ��, ���������� �� 4 ";
    SBN1.PrintBinDec(true);

    cout << "������ �� ���� ��������� � ������� � ����������������� �������" << endl;
    SBigNum SBN2;
    SBN2.setnum(byte8max);

    SBN1 = SBN1 - SBN2;
    SBN1.hexadecimal();
    cout << endl;

    cout << "__" << endl;
    cout << "������� ����� (����� � �������)" << endl;

    string str;
    getline(cin, str);

    SBigNum SBN3;
    SBN3.StrToBin(str);
    cout << "��������� ����� = ";
    SBN3.PrintBinDec(true);

    cout << endl << "��� �� � ����������������� ������� : ";
    SBN3.hexadecimal();
    cout << endl;
    cout<<"__"<<endl;

    cout << "������� �����, �� ������ � �������" << endl;
    getline(cin, str);
    SBigNum SBN4;
    SBN4.StrToBin(str);

    cout << "��������� ����� = ";
    SBN3.PrintBinDec(true);
    cout << endl << "��� �� � ����������������� ������� : ";
    SBN3.hexadecimal();

    return 0;
}
